#Create a dataframe
#access the dataframe
#edit the dataframe
#update the dataaframe
#check the values
#exploratory dataframe
#null and missing values in the dataframe
#columnwise data transformation
#row wised data trassformations
# subset of the dataframe
#add the values to the dataframe using loops
#

#install.packages("safetyData")
library(safetyData)

#detach("package:safetyData", unload = TRUE)

age<-c(number=2:5)
age
name <-c(name = "anjana",age="R",factr="learning",purpose="wow")
name

name[1]
first_dataset<-data.frame(age,name)

class(first_dataset)

View(first_dataset)

dim(first_dataset)

str(first_dataset)

names(first_dataset) #column names

summary(first_dataset)

mean(first_dataset$age)  

list(name,age)


is.list(name)
name_list<-as.list(name)
name_list

is.list(name_list)

example_list<-list(name,age=age,"manish")
example_list

example_list[[2]]


library(safetyData)
example_dataset_1<-safetyData::adam_adlbh

names_df<-names(example_dataset_1)

names_df

dim(example_dataset_1)

names_df[5:10]

adlbh_age<-example_dataset_1$AGE # using $method  output will be vector

race_variable<-example_dataset_1$RACE

class(race_variable)

race_variable_2<-example_dataset_1[["RACE"]]

race_variable_3<-example_dataset_1[[13]]

values<-adlbh_age[1:4]

values_vector<-c(values,"anjana")
values_vector
age_column<-example_dataset_1[["AGE"]] #string of the column  #vector will be the format output 

index_column<-example_dataset_1[12:14]  # 3rd method  #output will be table
View(index_column)




#Combine Data Frames
# In R, we use the rbind() and the cbind() function to combine two data frames together.
# 
# rbind() - combines two data frames vertically
# cbind() - combines two data frames horizontally


# create a data frame
dataframe1 <- data.frame (
  Name = c("Juan", "Alcaraz","anjana"),
  Age = c(22, 15,56),
  gender= c("male","female","male")
)

# create another data frame
dataframe2 <- data.frame (
  Name = c("Yiruma", "Bach"),
  Age = c(46, 89)
)

print(dataframe1)
print(dataframe2)
dim(dataframe1)
str(dataframe1)

# combine two data frames vertically 
updated <- rbind(dataframe1, dataframe2)
print(updated)

# create a data frame
dataframe1 <- data.frame (
  Name = c("Juan", "Alcaraz"),
  Age = c(22, 15)
)
print(dataframe1)
# create another data frame
dataframe2 <- data.frame (
  Hobby = c("Tennis", "Piano")
)
print(dataframe2)
dim(dataframe2)

# combine two data frames horizontally 
updated <- cbind(dataframe1, dataframe2)
print(updated)

#If we want to combine two data frames vertically, the column name of the two data frames must be the same. 
#Note: The number of items on each vector of two or more combining data frames must be equal otherwise we will get an error


# Create a data frame
dataframe1 <- data.frame (
  Name = c("Juan", "Alcaraz", "Simantha"),
  Age = c(22, 15, 19),
  Vote = c(TRUE, FALSE, TRUE)
)

cat("Total Elements:", length(dataframe1))

#Data Manipulation in R With dplyr Package


# select() :- To select columns (variables)
# filter() :-To filter (subset) rows.
# mutate() :-To create new variables
# summarise() :- To summarize (or aggregate) data
# group_by() :- To group data
# arrange() :- To sort data
# join() :- To join data frames.


install.packages("dplyr")
#To load dplyr package
library("dplyr")

acccess_2<-iris[1]
class(acccess_2)

access_3<-iris$Sepal.Length
class(access_3)

access_4<-iris[[1]]
access_4

library(safetyData)
example_dataset_1<-safetyData::adam_adlbh
name_list<-names(example_dataset_1)
name_list

#To select the following columns
selected <- select(iris, Sepal.Length, Sepal.Width, Petal.Length)

class(selected)

head(selected)
#To select all columns from Sepal.Length to Petal.Length
selected1 <- select(iris, Sepal.Length:Petal.Length)
#To print first four rows
head(selected1, 4)                           
#To select columns with numeric indexes
selected1 <- select(iris,c(3:5))
head(selected1)

iris %>% select(!ends_with("Width"))

iris %>% select(starts_with("Se"))

iris %>% select(!c(Sepal.Length, Petal.Length))

iris %>% select(starts_with("Petal") & ends_with("Width"))

iris %>% select(starts_with("Petal") | ends_with("Width"))

#We use(-)to hide a particular column
selected <- select(iris, -Sepal.Length, -Sepal.Width)
head(selected)

#To select the first 3 rows with Species as setosa
filtered <- filter(iris, Species == "setosa" )
dim(filtered)
head(filtered,3)


#To select the last 5 rows with Species as versicolor and Sepal width more than 3

filtered1 <- filter(iris, Species == "versicolor", Sepal.Width > 3)

tail(filtered1)

dim(filtered1)

filtered1$new_column<-9

#To create a column “Greater.Half” which stores TRUE if given condition is TRUE
col1 <- mutate(iris, Greater.Half = Sepal.Width > 0.5 * Sepal.Length)
tail(col1)

table(col1$Greater.Half)

#To arrange Sepal Width in ascending order
arranged <- arrange(col1, Sepal.Width)
head(arranged)
#To arrange Sepal Width in descending order
arranged <- arrange(col1, desc(Sepal.Width))
head(arranged)

#It is used to find insights(mean, median, mode, etc.) from a dataset. It reduces multiple values down to a single value.
summarised <- summarise(arranged, Mean.Width = mean(Sepal.Width))
head(summarised)


# Grouping10
# It is done to group observations within a dataset by one or more variables. Most data operations are performed on groups defined by variables.
# For example:
  
  #To find mean sepal width by Species, we use grouping as follows
  gp <- group_by(iris,Species)
mn <- summarise(gp,Mean.Sepal = mean(Sepal.Width))
head(mn)

# Pipe Operator
# Pipe operator lets us wrap multiple functions together. It is denoted as %>% . It can be used with functions like filter(), select(), arrange(), summarise(), group_by(), etc.
# For example:
  
  #To get rows with the following conditions
  iris %>% filter(Species == "setosa",Sepal.Width > 3.8)

# using dplyr package  excercises
dplyr::tbl_df(iris)
  

# Converts data to tbl class. tbl’s are easier to examine than
# data frames. R displays only the data that fits onscreen:


dplyr::glimpse(iris)
#Information dense summary of tbl data. 


utils::View(iris)
#View data set in spreadsheet-like display (note capital V)


